#include <string>

namespace shaders
{
	static std::string deferredCombineVarying = 
		"vec2 v_texcoord0 : TEXCOORD0 = vec2(0.0, 0.0);\n"
		"\n"
		"vec3 a_position : POSITION;\n"
		"vec2 a_texcoord0 : TEXCOORD0;\n";

	static std::string deferredCombineVertex =
		"$input a_position, a_texcoord0\n"
		"$output v_texcoord0\n"
		"\n"
		"uniform mat4 u_modelViewProj;\n"
		"\n"
		"void main()\n"
		"{\n"
		"	gl_Position = u_modelViewProj * vec4(a_position, 1.0);\n"
		"	v_texcoord0 = a_texcoord0;\n"
		"}\n";

	static std::string deferredCombineFragment =
		"$input v_texcoord0\n"
		"\n"
		"uniform sampler2D u_albedoMap;\n"
		"uniform sampler2D u_depthMap;\n"
		"uniform sampler2D u_lightColor;\n"
		"uniform sampler2D u_lightMap;\n"
		"uniform sampler2D u_normalMap;\n"
		"uniform sampler2D u_mraMap;\n"
		"uniform samplerCube u_envMap;\n"
		"\n"
		"uniform vec4 u_ambientColor;\n"
		"uniform vec4 u_clearColor;\n"
		"uniform vec4 u_giParams;\n"
		"uniform vec4 u_camPos;\n"
		"uniform mat4 u_invVP;\n"
		"\n"
		"vec3 clipToWorld(mat4 _invViewProj, vec3 _clipPos)\n"
		"{\n"
		"	vec4 wpos = _invViewProj * vec4(_clipPos, 1.0);\n"
		"	return wpos.xyz / wpos.w;\n"
		"}\n"
		"\n"
		"vec3 decodeNormalUint(vec3 _encodedNormal)\n"
		"{\n"
		"	return _encodedNormal * 2.0 - 1.0;\n"
		"}\n"
		"\n"
		"void main()\n"
		"{\n"
		"	vec4 color = texture2D(u_albedoMap, v_texcoord0);\n"
		"	vec4 light = texture2D(u_lightColor, v_texcoord0);\n"
		"	vec4 depth = texture2D(u_depthMap, v_texcoord0);\n"
		"	vec4 mra = texture2D(u_mraMap, v_texcoord0);\n"
		"	vec4 lightmap = texture2D(u_lightMap, v_texcoord0);\n"
		"\n"
		"	lightmap.rgb *= lightmap.a;\n"
		"\n"
		"	vec3 gi = vec3(1.0);\n"
		"\n"
		"	if (u_giParams.x == 1.0)\n"
		"	{\n"
		"		float deviceDepth = texture2D(u_depthMap, v_texcoord0).r;\n"
		"		float depth = deviceDepth * 2.0 - 1.0;\n"
		"\n"
		"		vec3 clip = vec3(v_texcoord0 * 2.0 - 1.0, depth);\n"
		"		vec3 wpos = clipToWorld(u_invVP, clip);\n"
		"		vec3 normal = decodeNormalUint(texture2D(u_normalMap, v_texcoord0).xyz);\n"
		"\n"
		"		vec3 N = normalize(normal);\n"
		"		vec3 V = normalize(u_camPos.xyz - wpos);\n"
		"\n"
		"		vec3 R = reflect(V, N);\n"
		"\n"
		"		float MAX_REFLECTION_LOD = 10.0;\n"
		"		float roughness = mra.y;\n"
		"		vec3 prefilteredColor = textureCubeLod(u_envMap, R, roughness * MAX_REFLECTION_LOD).rgb;\n"
		"		gi = prefilteredColor * u_giParams.y;\n"
		"	}\n"
		"\n"
		"	vec3 ambient = (u_ambientColor.rgb * (color.rgb * gi)) + (color.rgb * color.a);\n"
		"	vec3 deferred = ambient + (color.rgb * lightmap.rgb) + light.rgb;\n"
		"\n"
		"	if (depth.r < 1.0)\n"
		"	{\n"
		"		gl_FragColor = vec4(deferred, 1.0);\n"
		"	}\n"
		"	else\n"
		"	{\n"
		"		discard;\n"
		"	}\n"
		"	gl_FragDepth = depth.r;\n"
		"}\n";
}